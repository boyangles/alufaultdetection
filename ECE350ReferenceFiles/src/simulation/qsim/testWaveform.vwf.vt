// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/26/2016 23:36:38"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          processor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module processor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg button_cycle_in;
reg button_drop_in;
reg clock;
reg ps2_key_pressed;
reg [7:0] ps2_out;
reg reset;
// wires                                               
wire [11:0] debug_addr;
wire [31:0] debug_data;
wire [31:0] lcd_data;
wire lcd_write;
wire [31:0] out1;
wire [31:0] out2;
wire [31:0] reg16_output;
wire [31:0] reg17_output;
wire [31:0] reg18_output;
wire [31:0] reg19_output;
wire [31:0] reg20_output;
wire [31:0] reg21_output;
wire [31:0] reg22_output;
wire [31:0] reg23_output;
wire [31:0] reg24_output;
wire [31:0] regFile_data_W_output;
wire [4:0] regFile_register_W_output;

// assign statements (if any)                          
processor i1 (
// port map - connection between master ports and signals/registers   
	.button_cycle_in(button_cycle_in),
	.button_drop_in(button_drop_in),
	.clock(clock),
	.debug_addr(debug_addr),
	.debug_data(debug_data),
	.lcd_data(lcd_data),
	.lcd_write(lcd_write),
	.out1(out1),
	.out2(out2),
	.ps2_key_pressed(ps2_key_pressed),
	.ps2_out(ps2_out),
	.reg16_output(reg16_output),
	.reg17_output(reg17_output),
	.reg18_output(reg18_output),
	.reg19_output(reg19_output),
	.reg20_output(reg20_output),
	.reg21_output(reg21_output),
	.reg22_output(reg22_output),
	.reg23_output(reg23_output),
	.reg24_output(reg24_output),
	.regFile_data_W_output(regFile_data_W_output),
	.regFile_register_W_output(regFile_register_W_output),
	.reset(reset)
);
initial 
begin 
#5000000 $finish;
end 

// button_cycle_in
initial
begin
	button_cycle_in = 1'b0;
end 

// button_drop_in
initial
begin
	button_drop_in = 1'b0;
end 

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 

// ps2_key_pressed
initial
begin
	ps2_key_pressed = 1'b0;
end 
// ps2_out[ 7 ]
initial
begin
	ps2_out[7] = 1'b0;
end 
// ps2_out[ 6 ]
initial
begin
	ps2_out[6] = 1'b0;
end 
// ps2_out[ 5 ]
initial
begin
	ps2_out[5] = 1'b0;
end 
// ps2_out[ 4 ]
initial
begin
	ps2_out[4] = 1'b0;
end 
// ps2_out[ 3 ]
initial
begin
	ps2_out[3] = 1'b0;
end 
// ps2_out[ 2 ]
initial
begin
	ps2_out[2] = 1'b0;
end 
// ps2_out[ 1 ]
initial
begin
	ps2_out[1] = 1'b0;
end 
// ps2_out[ 0 ]
initial
begin
	ps2_out[0] = 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
endmodule

